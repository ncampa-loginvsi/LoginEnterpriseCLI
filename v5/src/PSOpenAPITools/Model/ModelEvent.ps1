#
# Login Enterprise
# v6.0-preview [API Console (Swagger)](/publicApi/swagger/index.html?urls.primaryName=Login%20Enterprise%20API%20v6-preview), [Documentation (ReDoc)](/publicApi/v6-preview/docs/index.html)  v5.0 [API Console (Swagger)](/publicApi/swagger/index.html?urls.primaryName=Login%20Enterprise%20API%20v5), [Documentation (ReDoc)](/publicApi/v5/docs/index.html)  v4.0 [API Console (Swagger)](/publicApi/swagger/index.html?urls.primaryName=Login%20Enterprise%20API%20v4), [Documentation (ReDoc)](/publicApi/v4/docs/index.html)    <b>Public API version 5 is the preferred API to be used. Version 3 was deprecated in 4.5 and officially removed in 4.9.</b> <b>Public API version 6 is currently a preview API and is subject of (breaking) changes in the future.</b>   The Login Enterprise Public API provides documentation and Swagger per version within the product. For additional information please refer to the [documentation](https://support.loginvsi.com/hc/en-us/articles/360009534760) on our website. 
# Version: 5.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Event

.PARAMETER Id
Event id
.PARAMETER EventType
No description available.
.PARAMETER Timestamp
Created date-time
.PARAMETER Title
Event title
.PARAMETER TestId
Test id
.PARAMETER TestRunId
Test run id
.PARAMETER UserSessionId
User session id
.PARAMETER ApplicationId
Application id
.PARAMETER Properties
Event properties
.OUTPUTS

ModelEvent<PSCustomObject>
#>

function Initialize-ModelEvent {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("launcherOffline", "connectionInitializationTimeout", "loginFailure", "sessionFailure", "applicationFailure", "launcherCapacityExceeded", "accountCapacityExceeded", "applicationThresholdExceeded", "emailFailure", "sessionDiscoveryError", "scriptEvent", "latencyThresholdExceeded", "loginTimeThresholdExceeded", "latencyMeasurementFailed", "loginTimeMeasurementFailed", "emailRequest", "accountDisabled", "sessionRequestEndedBeforeEngineBecameOnline", "licenseSessionLimit", "testRunStarted", "testRunCancelled", "testRunFailed", "testRunFinished", "appExecutionAbandoned", "enginePaused", "engineResumed", "remoteSessionDisconnected", "scriptScreenshot", "screenshotFailure", "dataRetentionStarted", "dataRetentionFinished", "dataRetentionFailed", "databaseFailure", "euxInitializationFailure", "euxExecutionFailure")]
        [PSCustomObject]
        ${EventType},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${Timestamp},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Title},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${TestId},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${TestRunId},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${UserSessionId},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ApplicationId},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Properties}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => ModelEvent' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "eventType" = ${EventType}
            "timestamp" = ${Timestamp}
            "title" = ${Title}
            "testId" = ${TestId}
            "testRunId" = ${TestRunId}
            "userSessionId" = ${UserSessionId}
            "applicationId" = ${ApplicationId}
            "properties" = ${Properties}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ModelEvent<PSCustomObject>

.DESCRIPTION

Convert from JSON to ModelEvent<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ModelEvent<PSCustomObject>
#>
function ConvertFrom-JsonToModelEvent {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => ModelEvent' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ModelEvent
        $AllProperties = ("id", "eventType", "timestamp", "title", "testId", "testRunId", "userSessionId", "applicationId", "properties")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "eventType"))) { #optional property not found
            $EventType = $null
        } else {
            $EventType = $JsonParameters.PSobject.Properties["eventType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "timestamp"))) { #optional property not found
            $Timestamp = $null
        } else {
            $Timestamp = $JsonParameters.PSobject.Properties["timestamp"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "title"))) { #optional property not found
            $Title = $null
        } else {
            $Title = $JsonParameters.PSobject.Properties["title"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "testId"))) { #optional property not found
            $TestId = $null
        } else {
            $TestId = $JsonParameters.PSobject.Properties["testId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "testRunId"))) { #optional property not found
            $TestRunId = $null
        } else {
            $TestRunId = $JsonParameters.PSobject.Properties["testRunId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "userSessionId"))) { #optional property not found
            $UserSessionId = $null
        } else {
            $UserSessionId = $JsonParameters.PSobject.Properties["userSessionId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "applicationId"))) { #optional property not found
            $ApplicationId = $null
        } else {
            $ApplicationId = $JsonParameters.PSobject.Properties["applicationId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "properties"))) { #optional property not found
            $Properties = $null
        } else {
            $Properties = $JsonParameters.PSobject.Properties["properties"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "eventType" = ${EventType}
            "timestamp" = ${Timestamp}
            "title" = ${Title}
            "testId" = ${TestId}
            "testRunId" = ${TestRunId}
            "userSessionId" = ${UserSessionId}
            "applicationId" = ${ApplicationId}
            "properties" = ${Properties}
        }

        return $PSO
    }

}

