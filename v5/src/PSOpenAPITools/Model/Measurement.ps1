#
# Login Enterprise
# v6.0-preview [API Console (Swagger)](/publicApi/swagger/index.html?urls.primaryName=Login%20Enterprise%20API%20v6-preview), [Documentation (ReDoc)](/publicApi/v6-preview/docs/index.html)  v5.0 [API Console (Swagger)](/publicApi/swagger/index.html?urls.primaryName=Login%20Enterprise%20API%20v5), [Documentation (ReDoc)](/publicApi/v5/docs/index.html)  v4.0 [API Console (Swagger)](/publicApi/swagger/index.html?urls.primaryName=Login%20Enterprise%20API%20v4), [Documentation (ReDoc)](/publicApi/v4/docs/index.html)    <b>Public API version 5 is the preferred API to be used. Version 3 was deprecated in 4.5 and officially removed in 4.9.</b> <b>Public API version 6 is currently a preview API and is subject of (breaking) changes in the future.</b>   The Login Enterprise Public API provides documentation and Swagger per version within the product. For additional information please refer to the [documentation](https://support.loginvsi.com/hc/en-us/articles/360009534760) on our website. 
# Version: 5.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Measurement

.PARAMETER MeasurementId
Measurement id
.PARAMETER AppExecutionId
App execution id
.PARAMETER ApplicationId
Application id
.PARAMETER LauncherName
Launcher name
.PARAMETER AccountId
Account id
.PARAMETER TestRunId
Test run id
.PARAMETER UserSessionId
User session id
.PARAMETER Duration
Duration
.PARAMETER Timestamp
Measurement time-stamp
.PARAMETER Properties
Measurement properties
.OUTPUTS

Measurement<PSCustomObject>
#>

function Initialize-Measurement {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${MeasurementId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AppExecutionId},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ApplicationId},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${LauncherName},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AccountId},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${TestRunId},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${UserSessionId},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${Duration},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${Timestamp},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Properties}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => Measurement' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "measurementId" = ${MeasurementId}
            "appExecutionId" = ${AppExecutionId}
            "applicationId" = ${ApplicationId}
            "launcherName" = ${LauncherName}
            "accountId" = ${AccountId}
            "testRunId" = ${TestRunId}
            "userSessionId" = ${UserSessionId}
            "duration" = ${Duration}
            "timestamp" = ${Timestamp}
            "properties" = ${Properties}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to Measurement<PSCustomObject>

.DESCRIPTION

Convert from JSON to Measurement<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

Measurement<PSCustomObject>
#>
function ConvertFrom-JsonToMeasurement {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => Measurement' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in Measurement
        $AllProperties = ("measurementId", "appExecutionId", "applicationId", "launcherName", "accountId", "testRunId", "userSessionId", "duration", "timestamp", "properties")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "measurementId"))) { #optional property not found
            $MeasurementId = $null
        } else {
            $MeasurementId = $JsonParameters.PSobject.Properties["measurementId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "appExecutionId"))) { #optional property not found
            $AppExecutionId = $null
        } else {
            $AppExecutionId = $JsonParameters.PSobject.Properties["appExecutionId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "applicationId"))) { #optional property not found
            $ApplicationId = $null
        } else {
            $ApplicationId = $JsonParameters.PSobject.Properties["applicationId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "launcherName"))) { #optional property not found
            $LauncherName = $null
        } else {
            $LauncherName = $JsonParameters.PSobject.Properties["launcherName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "accountId"))) { #optional property not found
            $AccountId = $null
        } else {
            $AccountId = $JsonParameters.PSobject.Properties["accountId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "testRunId"))) { #optional property not found
            $TestRunId = $null
        } else {
            $TestRunId = $JsonParameters.PSobject.Properties["testRunId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "userSessionId"))) { #optional property not found
            $UserSessionId = $null
        } else {
            $UserSessionId = $JsonParameters.PSobject.Properties["userSessionId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "duration"))) { #optional property not found
            $Duration = $null
        } else {
            $Duration = $JsonParameters.PSobject.Properties["duration"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "timestamp"))) { #optional property not found
            $Timestamp = $null
        } else {
            $Timestamp = $JsonParameters.PSobject.Properties["timestamp"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "properties"))) { #optional property not found
            $Properties = $null
        } else {
            $Properties = $JsonParameters.PSobject.Properties["properties"].value
        }

        $PSO = [PSCustomObject]@{
            "measurementId" = ${MeasurementId}
            "appExecutionId" = ${AppExecutionId}
            "applicationId" = ${ApplicationId}
            "launcherName" = ${LauncherName}
            "accountId" = ${AccountId}
            "testRunId" = ${TestRunId}
            "userSessionId" = ${UserSessionId}
            "duration" = ${Duration}
            "timestamp" = ${Timestamp}
            "properties" = ${Properties}
        }

        return $PSO
    }

}

