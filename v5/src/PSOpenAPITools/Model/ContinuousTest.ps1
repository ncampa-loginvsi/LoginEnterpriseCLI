#
# Login Enterprise
# v6.0-preview [API Console (Swagger)](/publicApi/swagger/index.html?urls.primaryName=Login%20Enterprise%20API%20v6-preview), [Documentation (ReDoc)](/publicApi/v6-preview/docs/index.html)  v5.0 [API Console (Swagger)](/publicApi/swagger/index.html?urls.primaryName=Login%20Enterprise%20API%20v5), [Documentation (ReDoc)](/publicApi/v5/docs/index.html)  v4.0 [API Console (Swagger)](/publicApi/swagger/index.html?urls.primaryName=Login%20Enterprise%20API%20v4), [Documentation (ReDoc)](/publicApi/v4/docs/index.html)    <b>Public API version 5 is the preferred API to be used. Version 3 was deprecated in 4.5 and officially removed in 4.9.</b> <b>Public API version 6 is currently a preview API and is subject of (breaking) changes in the future.</b>   The Login Enterprise Public API provides documentation and Swagger per version within the product. For additional information please refer to the [documentation](https://support.loginvsi.com/hc/en-us/articles/360009534760) on our website. 
# Version: 5.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Continuous test

.PARAMETER Type
No description available.
.PARAMETER ScheduleType
No description available.
.PARAMETER ScheduleIntervalInMinutes
Schedule interval in minutes
.PARAMETER NumberOfSessions
Number of sessions
.PARAMETER EnableCustomScreenshots
Enable script screenshots
.PARAMETER RepeatCount
Number of times the schedule is repeated
.PARAMETER IsRepeatEnabled
Enable schedule repeating
.PARAMETER IsEnabled
Enable schedule
.PARAMETER RestartOnComplete
Enable restarting on completion
.PARAMETER AlertConfigurations
Alert configurations
.PARAMETER Id
Test id
.PARAMETER Name
Test name
.PARAMETER Description
Test description
.PARAMETER Created
Created date-time
.PARAMETER Environment
No description available.
.PARAMETER Workload
No description available.
.OUTPUTS

ContinuousTest<PSCustomObject>
#>

function Initialize-ContinuousTest {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Type},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("desktop", "interval", "concurrentSessions", "intervalPerLauncher")]
        [PSCustomObject]
        ${ScheduleType},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${ScheduleIntervalInMinutes},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${NumberOfSessions},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${EnableCustomScreenshots},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${RepeatCount},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IsRepeatEnabled},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IsEnabled},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${RestartOnComplete},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${AlertConfigurations},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${Created},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Environment},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Workload}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => ContinuousTest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Type) {
            throw "invalid value for 'Type', 'Type' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "type" = ${Type}
            "scheduleType" = ${ScheduleType}
            "scheduleIntervalInMinutes" = ${ScheduleIntervalInMinutes}
            "numberOfSessions" = ${NumberOfSessions}
            "enableCustomScreenshots" = ${EnableCustomScreenshots}
            "repeatCount" = ${RepeatCount}
            "isRepeatEnabled" = ${IsRepeatEnabled}
            "isEnabled" = ${IsEnabled}
            "restartOnComplete" = ${RestartOnComplete}
            "alertConfigurations" = ${AlertConfigurations}
            "id" = ${Id}
            "name" = ${Name}
            "description" = ${Description}
            "created" = ${Created}
            "environment" = ${Environment}
            "workload" = ${Workload}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ContinuousTest<PSCustomObject>

.DESCRIPTION

Convert from JSON to ContinuousTest<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ContinuousTest<PSCustomObject>
#>
function ConvertFrom-JsonToContinuousTest {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => ContinuousTest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ContinuousTest
        $AllProperties = ("type", "scheduleType", "scheduleIntervalInMinutes", "numberOfSessions", "enableCustomScreenshots", "repeatCount", "isRepeatEnabled", "isEnabled", "restartOnComplete", "alertConfigurations", "id", "name", "description", "created", "environment", "workload")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'type' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "type"))) {
            throw "Error! JSON cannot be serialized due to the required property 'type' missing."
        } else {
            $Type = $JsonParameters.PSobject.Properties["type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "scheduleType"))) { #optional property not found
            $ScheduleType = $null
        } else {
            $ScheduleType = $JsonParameters.PSobject.Properties["scheduleType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "scheduleIntervalInMinutes"))) { #optional property not found
            $ScheduleIntervalInMinutes = $null
        } else {
            $ScheduleIntervalInMinutes = $JsonParameters.PSobject.Properties["scheduleIntervalInMinutes"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "numberOfSessions"))) { #optional property not found
            $NumberOfSessions = $null
        } else {
            $NumberOfSessions = $JsonParameters.PSobject.Properties["numberOfSessions"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "enableCustomScreenshots"))) { #optional property not found
            $EnableCustomScreenshots = $null
        } else {
            $EnableCustomScreenshots = $JsonParameters.PSobject.Properties["enableCustomScreenshots"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "repeatCount"))) { #optional property not found
            $RepeatCount = $null
        } else {
            $RepeatCount = $JsonParameters.PSobject.Properties["repeatCount"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "isRepeatEnabled"))) { #optional property not found
            $IsRepeatEnabled = $null
        } else {
            $IsRepeatEnabled = $JsonParameters.PSobject.Properties["isRepeatEnabled"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "isEnabled"))) { #optional property not found
            $IsEnabled = $null
        } else {
            $IsEnabled = $JsonParameters.PSobject.Properties["isEnabled"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "restartOnComplete"))) { #optional property not found
            $RestartOnComplete = $null
        } else {
            $RestartOnComplete = $JsonParameters.PSobject.Properties["restartOnComplete"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "alertConfigurations"))) { #optional property not found
            $AlertConfigurations = $null
        } else {
            $AlertConfigurations = $JsonParameters.PSobject.Properties["alertConfigurations"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "created"))) { #optional property not found
            $Created = $null
        } else {
            $Created = $JsonParameters.PSobject.Properties["created"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "environment"))) { #optional property not found
            $Environment = $null
        } else {
            $Environment = $JsonParameters.PSobject.Properties["environment"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "workload"))) { #optional property not found
            $Workload = $null
        } else {
            $Workload = $JsonParameters.PSobject.Properties["workload"].value
        }

        $PSO = [PSCustomObject]@{
            "type" = ${Type}
            "scheduleType" = ${ScheduleType}
            "scheduleIntervalInMinutes" = ${ScheduleIntervalInMinutes}
            "numberOfSessions" = ${NumberOfSessions}
            "enableCustomScreenshots" = ${EnableCustomScreenshots}
            "repeatCount" = ${RepeatCount}
            "isRepeatEnabled" = ${IsRepeatEnabled}
            "isEnabled" = ${IsEnabled}
            "restartOnComplete" = ${RestartOnComplete}
            "alertConfigurations" = ${AlertConfigurations}
            "id" = ${Id}
            "name" = ${Name}
            "description" = ${Description}
            "created" = ${Created}
            "environment" = ${Environment}
            "workload" = ${Workload}
        }

        return $PSO
    }

}

