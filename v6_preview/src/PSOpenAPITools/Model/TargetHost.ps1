#
# Login Enterprise
# v6.0-preview [API Console (Swagger)](/publicApi/swagger/index.html?urls.primaryName=Login%20Enterprise%20API%20v6-preview), [Documentation (ReDoc)](/publicApi/v6-preview/docs/index.html)  v5.0 [API Console (Swagger)](/publicApi/swagger/index.html?urls.primaryName=Login%20Enterprise%20API%20v5), [Documentation (ReDoc)](/publicApi/v5/docs/index.html)  v4.0 [API Console (Swagger)](/publicApi/swagger/index.html?urls.primaryName=Login%20Enterprise%20API%20v4), [Documentation (ReDoc)](/publicApi/v4/docs/index.html)    <b>Public API version 5 is the preferred API to be used. Version 3 was deprecated in 4.5 and officially removed in 4.9.</b> <b>Public API version 6 is currently a preview API and is subject of (breaking) changes in the future.</b>   The Login Enterprise Public API provides documentation and Swagger per version within the product. For additional information please refer to the [documentation](https://support.loginvsi.com/hc/en-us/articles/360009534760) on our website. 
# Version: 6.0-preview
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Target Host

.PARAMETER Enabled
Enable the
.PARAMETER Endpoint
RDS Broker / RDP Host
.OUTPUTS

TargetHost<PSCustomObject>
#>

function Initialize-TargetHost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Enabled},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Endpoint}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => TargetHost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Endpoint) {
            throw "invalid value for 'Endpoint', 'Endpoint' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "enabled" = ${Enabled}
            "endpoint" = ${Endpoint}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to TargetHost<PSCustomObject>

.DESCRIPTION

Convert from JSON to TargetHost<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

TargetHost<PSCustomObject>
#>
function ConvertFrom-JsonToTargetHost {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => TargetHost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in TargetHost
        $AllProperties = ("enabled", "endpoint")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'endpoint' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "endpoint"))) {
            throw "Error! JSON cannot be serialized due to the required property 'endpoint' missing."
        } else {
            $Endpoint = $JsonParameters.PSobject.Properties["endpoint"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "enabled"))) { #optional property not found
            $Enabled = $null
        } else {
            $Enabled = $JsonParameters.PSobject.Properties["enabled"].value
        }

        $PSO = [PSCustomObject]@{
            "enabled" = ${Enabled}
            "endpoint" = ${Endpoint}
        }

        return $PSO
    }

}

