#
# Login Enterprise
# v6.0-preview [API Console (Swagger)](/publicApi/swagger/index.html?urls.primaryName=Login%20Enterprise%20API%20v6-preview), [Documentation (ReDoc)](/publicApi/v6-preview/docs/index.html)  v5.0 [API Console (Swagger)](/publicApi/swagger/index.html?urls.primaryName=Login%20Enterprise%20API%20v5), [Documentation (ReDoc)](/publicApi/v5/docs/index.html)  v4.0 [API Console (Swagger)](/publicApi/swagger/index.html?urls.primaryName=Login%20Enterprise%20API%20v4), [Documentation (ReDoc)](/publicApi/v4/docs/index.html)    <b>Public API version 5 is the preferred API to be used. Version 3 was deprecated in 4.5 and officially removed in 4.9.</b> <b>Public API version 6 is currently a preview API and is subject of (breaking) changes in the future.</b>   The Login Enterprise Public API provides documentation and Swagger per version within the product. For additional information please refer to the [documentation](https://support.loginvsi.com/hc/en-us/articles/360009534760) on our website. 
# Version: 6.0-preview
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Application test update data

.PARAMETER Type
No description available.
.PARAMETER IsEmailEnabled
Enable email notification
.PARAMETER EmailRecipient
Notification email address
.PARAMETER IncludeSuccessfulApplications
Include successful applications in report
.PARAMETER Name
Test name
.PARAMETER Description
Test description
.PARAMETER EnvironmentUpdate
No description available.
.PARAMETER Steps
Workload steps creation data
.OUTPUTS

ApplicationTestUpdate<PSCustomObject>
#>

function Initialize-ApplicationTestUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Type},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [Boolean]
        ${IsEmailEnabled},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${EmailRecipient},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [Boolean]
        ${IncludeSuccessfulApplications},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${EnvironmentUpdate},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Steps}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => ApplicationTestUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Type) {
            throw "invalid value for 'Type', 'Type' cannot be null."
        }

        if ($null -eq $IsEmailEnabled) {
            throw "invalid value for 'IsEmailEnabled', 'IsEmailEnabled' cannot be null."
        }

        if ($null -eq $IncludeSuccessfulApplications) {
            throw "invalid value for 'IncludeSuccessfulApplications', 'IncludeSuccessfulApplications' cannot be null."
        }

        if ($null -eq $Name) {
            throw "invalid value for 'Name', 'Name' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "type" = ${Type}
            "isEmailEnabled" = ${IsEmailEnabled}
            "emailRecipient" = ${EmailRecipient}
            "includeSuccessfulApplications" = ${IncludeSuccessfulApplications}
            "name" = ${Name}
            "description" = ${Description}
            "environmentUpdate" = ${EnvironmentUpdate}
            "steps" = ${Steps}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ApplicationTestUpdate<PSCustomObject>

.DESCRIPTION

Convert from JSON to ApplicationTestUpdate<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ApplicationTestUpdate<PSCustomObject>
#>
function ConvertFrom-JsonToApplicationTestUpdate {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => ApplicationTestUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ApplicationTestUpdate
        $AllProperties = ("type", "isEmailEnabled", "emailRecipient", "includeSuccessfulApplications", "name", "description", "environmentUpdate", "steps")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'type' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "type"))) {
            throw "Error! JSON cannot be serialized due to the required property 'type' missing."
        } else {
            $Type = $JsonParameters.PSobject.Properties["type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "isEmailEnabled"))) {
            throw "Error! JSON cannot be serialized due to the required property 'isEmailEnabled' missing."
        } else {
            $IsEmailEnabled = $JsonParameters.PSobject.Properties["isEmailEnabled"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "includeSuccessfulApplications"))) {
            throw "Error! JSON cannot be serialized due to the required property 'includeSuccessfulApplications' missing."
        } else {
            $IncludeSuccessfulApplications = $JsonParameters.PSobject.Properties["includeSuccessfulApplications"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) {
            throw "Error! JSON cannot be serialized due to the required property 'name' missing."
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "emailRecipient"))) { #optional property not found
            $EmailRecipient = $null
        } else {
            $EmailRecipient = $JsonParameters.PSobject.Properties["emailRecipient"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "environmentUpdate"))) { #optional property not found
            $EnvironmentUpdate = $null
        } else {
            $EnvironmentUpdate = $JsonParameters.PSobject.Properties["environmentUpdate"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "steps"))) { #optional property not found
            $Steps = $null
        } else {
            $Steps = $JsonParameters.PSobject.Properties["steps"].value
        }

        $PSO = [PSCustomObject]@{
            "type" = ${Type}
            "isEmailEnabled" = ${IsEmailEnabled}
            "emailRecipient" = ${EmailRecipient}
            "includeSuccessfulApplications" = ${IncludeSuccessfulApplications}
            "name" = ${Name}
            "description" = ${Description}
            "environmentUpdate" = ${EnvironmentUpdate}
            "steps" = ${Steps}
        }

        return $PSO
    }

}

