#
# Login Enterprise
# v6.0-preview [API Console (Swagger)](/publicApi/swagger/index.html?urls.primaryName=Login%20Enterprise%20API%20v6-preview), [Documentation (ReDoc)](/publicApi/v6-preview/docs/index.html)  v5.0 [API Console (Swagger)](/publicApi/swagger/index.html?urls.primaryName=Login%20Enterprise%20API%20v5), [Documentation (ReDoc)](/publicApi/v5/docs/index.html)  v4.0 [API Console (Swagger)](/publicApi/swagger/index.html?urls.primaryName=Login%20Enterprise%20API%20v4), [Documentation (ReDoc)](/publicApi/v4/docs/index.html)    <b>Public API version 5 is the preferred API to be used. Version 3 was deprecated in 4.5 and officially removed in 4.9.</b> <b>Public API version 6 is currently a preview API and is subject of (breaking) changes in the future.</b>   The Login Enterprise Public API provides documentation and Swagger per version within the product. For additional information please refer to the [documentation](https://support.loginvsi.com/hc/en-us/articles/360009534760) on our website. 
# Version: 6.0-preview
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Windows application

.PARAMETER Type
No description available.
.PARAMETER CommandLine
Command line arguments
.PARAMETER WorkingDirectory
Working directory
.PARAMETER MainWindowTitle
Main window title
.PARAMETER MainProcessName
Main process name
.PARAMETER Id
Application id
.PARAMETER Name
Application name
.PARAMETER Description
Application description
.PARAMETER Username
Application user name
.PARAMETER Created
Created date-time
.PARAMETER LastModified
Last modified date-time
.PARAMETER Script
Application script
.PARAMETER Timers
Application timers
.OUTPUTS

WindowsApplication<PSCustomObject>
#>

function Initialize-WindowsApplication {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Type},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CommandLine},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${WorkingDirectory},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${MainWindowTitle},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${MainProcessName},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Username},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${Created},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${LastModified},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Script},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${Timers}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => WindowsApplication' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Type) {
            throw "invalid value for 'Type', 'Type' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "type" = ${Type}
            "commandLine" = ${CommandLine}
            "workingDirectory" = ${WorkingDirectory}
            "mainWindowTitle" = ${MainWindowTitle}
            "mainProcessName" = ${MainProcessName}
            "id" = ${Id}
            "name" = ${Name}
            "description" = ${Description}
            "username" = ${Username}
            "created" = ${Created}
            "lastModified" = ${LastModified}
            "script" = ${Script}
            "timers" = ${Timers}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to WindowsApplication<PSCustomObject>

.DESCRIPTION

Convert from JSON to WindowsApplication<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

WindowsApplication<PSCustomObject>
#>
function ConvertFrom-JsonToWindowsApplication {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => WindowsApplication' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in WindowsApplication
        $AllProperties = ("type", "commandLine", "workingDirectory", "mainWindowTitle", "mainProcessName", "id", "name", "description", "username", "created", "lastModified", "script", "timers")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'type' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "type"))) {
            throw "Error! JSON cannot be serialized due to the required property 'type' missing."
        } else {
            $Type = $JsonParameters.PSobject.Properties["type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "commandLine"))) { #optional property not found
            $CommandLine = $null
        } else {
            $CommandLine = $JsonParameters.PSobject.Properties["commandLine"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "workingDirectory"))) { #optional property not found
            $WorkingDirectory = $null
        } else {
            $WorkingDirectory = $JsonParameters.PSobject.Properties["workingDirectory"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "mainWindowTitle"))) { #optional property not found
            $MainWindowTitle = $null
        } else {
            $MainWindowTitle = $JsonParameters.PSobject.Properties["mainWindowTitle"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "mainProcessName"))) { #optional property not found
            $MainProcessName = $null
        } else {
            $MainProcessName = $JsonParameters.PSobject.Properties["mainProcessName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "username"))) { #optional property not found
            $Username = $null
        } else {
            $Username = $JsonParameters.PSobject.Properties["username"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "created"))) { #optional property not found
            $Created = $null
        } else {
            $Created = $JsonParameters.PSobject.Properties["created"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "lastModified"))) { #optional property not found
            $LastModified = $null
        } else {
            $LastModified = $JsonParameters.PSobject.Properties["lastModified"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "script"))) { #optional property not found
            $Script = $null
        } else {
            $Script = $JsonParameters.PSobject.Properties["script"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "timers"))) { #optional property not found
            $Timers = $null
        } else {
            $Timers = $JsonParameters.PSobject.Properties["timers"].value
        }

        $PSO = [PSCustomObject]@{
            "type" = ${Type}
            "commandLine" = ${CommandLine}
            "workingDirectory" = ${WorkingDirectory}
            "mainWindowTitle" = ${MainWindowTitle}
            "mainProcessName" = ${MainProcessName}
            "id" = ${Id}
            "name" = ${Name}
            "description" = ${Description}
            "username" = ${Username}
            "created" = ${Created}
            "lastModified" = ${LastModified}
            "script" = ${Script}
            "timers" = ${Timers}
        }

        return $PSO
    }

}

